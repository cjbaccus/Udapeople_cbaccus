version: 2.1
 
orbs:
  slack: circleci/slack@4.1.4
  aws-cli: circleci/aws-cli@1.3.0
parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"
  memstash-token:
    type: string
    default: "91b68998-2d69-4b31-93c2-4f3f42925a80"
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm --recursive s3://udapeople-"<< pipeline.parameters.workflow-id >>"
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< pipeline.parameters.workflow-id >>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< pipeline.parameters.workflow-id >>"
            exit 0

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow. 
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              pwd
              ls -la
              npm run migrations:revert
            fi
  write-env-variables:
    description: Writes environment variables to env file
    steps:
      - run:
          name: Write to .env file
          command: |
            echo ENVIROMENT=production > "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

jobs:
  install-backend-dependencies:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: ls -la && npm install
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  install-frontend-dependencies:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: ls -la && npm install
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend Build
          command: |
            cd frontend
            pwd
            ls -la
            npm i
            npm run build
      # - persist_to_workspace:
      #     root: .
      #     paths:
      #       - frontend/dist

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend build
          command: |
            cd backend
            npm i
            npm run build
      # - persist_to_workspace:
      #     root: .
      #     paths:
      #       - backend/dist

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test frontend
          command: |
            cd frontend
            npm i
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test backend
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Check Frontend against security vulnerabilities
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
            node -v
      # - restore_cache:
      #     key: v1-frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [backend-build]
      - run:
          name: Check Backend against security vulnerabilities
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            node -v
      # - restore_cache:
      #     key: v1-backend-build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    # section reserved for specifically deploying only to master or branches beginning with rc- 
    #branches:
      #only:
        #- master 
        #- /rc-.*/
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists 
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>" \
              --tags project=udapeople-backend-<< pipeline.parameters.workflow-id >>
      - run:
          name: Save backend URL in memstash
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-<< pipeline.parameters.workflow-id >>" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            cat frontend/.env
            curl -H "Content-Type: text/plain" -H "token: 91b68998-2d69-4b31-93c2-4f3f42925a80" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/BACKEND_URL
      
      - run:
          name: Ensure front-end infrastructure exist
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>" \
              --tags project=udapeople-frontend-<< pipeline.parameters.workflow-id >> 
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-<< pipeline.parameters.workflow-id >>" \
              --output text >> inventory
              cat inventory
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #     template: success_tagged_deploy_1
      # - persist_to_workspace:
      #     root: .
      #     paths:
      #       - .circleci/ansible/inventory

      - save_cache:
          key: build-infra
          paths: [./circleci/ansible/inventory]
      # Here's where you will add some code to rollback on failure
      - destroy-environment     

  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5d:df:0d:87:b1:d7:ef:88:bf:89:64:e5:37:53:75:65"]
      - restore_cache:
          keys: [frontend-build, backend-build, build-infra]
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
            pip3 install --upgrade pip
            pip3 install awscli
            aws --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd
            ls -la ../
            ls -la ../../
            ansible-playbook -i inventory configure-server.yml -vv
      - destroy-environment        

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-infra, frontend-build, backend-build]
      # - attach_workspace:
      #     at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            sudo apt-get install unzip -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm install
            # sudo npm install pm2 -g
            npm run migrations > migration_status
            cat migration_status
            wc -l migration_status
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "DB migration successful, updating memstash..."
              curl -H "Content-Type: text/plain" -H "token: 91b68998-2d69-4b31-93c2-4f3f42925a80" --request PUT --data "success" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl -H "Content-Type: text/plain" -H "token: 91b68998-2d69-4b31-93c2-4f3f42925a80" --request PUT --data "fail" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
     # Here's where you will add some code to rollback on failure 
      # - destroy-environment      

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - restore_cache:
          keys: [frontend-build]
      # - attach_workspace:
      #     at: ~/
      # - run:
      #     name: Install AWS CLI dependencies
      #     # working_directory: ~/project/
      #     command: |
      #       # sudo apt-get update && sudo apt-get install -yy less
      #       # sudo apt-get install unzip -y
      #       # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       # unzip awscliv2.zip
      #       # sudo ./aws/install
      #       curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
      #       sudo apt install nodejs

      - run:
          name: Get backend url
          working_directory: ~/circleci/frontend
          command: |
            sudo chmod -R 777 /usr/local/lib/node_modules
            export API_URL=$(curl -H "token: 91b68998-2d69-4b31-93c2-4f3f42925a80" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo "${API_URL}"
            # echo ENVIRONMENT=production > "~/circleci/frontend/.env"
            # echo NODE_ENV=production >> "~/circleci/frontend/.env"
            # echo API_URL="${API_URL}"
            # cat ~/circleci/frontend/.env

      - run:
          name: Build frontend
          command: |
            sudo npm install webpack-dev-server -g
            cd frontend/
            sudo npm audit fix --audit-level=critical --force
            sudo npm i
            sudo npm run build

      - run:
          name: Deploy frontend objects
          # working_directory: /home/circleci/frontend
          command: |
            cd frontend/
            ls -la ./dist
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            echo "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
      - save_cache:
          key: deploy-frontend
          paths: [~/frontend]
      # - persist_to_workspace:
      #     root: .
      #     paths:
      #       - ~/frontend/
      # Here's where you will add some code to rollback on failure
      - revert-migrations     
      - destroy-environment 
                    
  deploy-backend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["44:d1:f0:b5:a1:df:17:11:0c:01:5c:e6:03:a1:86:53"]
      # - attach_workspace:
      #     at: .
      - restore_cache:
          keys: [backend-build]
      - write-env-variables
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip3 install --upgrade pip
            pip3 install awscli
            aws --version 
            export ANSIBLE_HOST_KEY_CHECKING=False
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible          
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False 
            export host_key_checking=False
            export record_host_keys=False
            #echo ENVIRONMENT=production > "../../backend/.env"
            cat ../../backend/.env
            cat inventory
            ansible-playbook -i inventory deploy-backend.yml -vv
      # Here's where you will add some code to rollback on failure
      #- revert-migrations
      #- destroy-environment

  smoke-test:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["44:d1:f0:b5:a1:df:17:11:0c:01:5c:e6:03:a1:86:53"]
      - restore_cache:
          keys: [frontend-build, backend-build, infra-build]
      # - attach_workspace:
      #     at: .
      - run:
          name: Install dependencies
          #working_directory: ./.circleci/ansible 
          command: |
            apk add --update curl nodejs npm
            pip install awscli
            aws --version
      - run:
          name: Get backend url smoke test
          command: |
           BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)
           echo "${BACKEND_IP}"  
           curl "http://${BACKEND_IP}:3030/api/status"
              
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi

  # cloudfront-update:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/cloudfront.yml \
  #             --stack-name udapeople-cloudfront-${CIRCLE_WORKFLOW_ID} \
  #             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
  #             --tags project=udapeople-cloudfront

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: old stack workflow id / remove old stack and files
          command: |
            export OldWorkflowID=$(aws cloudformation \
             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
             --no-paginate --output text)      
            
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Old Workflow Id: "${OldWorkflowID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then 
              aws s3 rb s3://udapeople-${OldWorkflowID} --force
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi


workflows:
  default:
    jobs:
      - install-frontend-dependencies
      - install-backend-dependencies
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [deploy-frontend]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      - cleanup:
          requires: [smoke-test]
